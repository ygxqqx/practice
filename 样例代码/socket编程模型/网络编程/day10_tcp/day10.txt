一.TCP的编程模型
	回顾：
		UDP模型的UML图
		TCP模型的UML图
	案例1：
		TCP的服务器（在案例中使用浏览器作为客户程序）		
	socket建立服务器的文件描述符号缓冲
	bind把IP地址与端口设置到文件描述符号中
	listen负责根据客户连接的不同IP与端口，负责生成对应的文件描述符号及其信息
	accept一旦listen有新的描述符号产生就返回，否则阻塞。
	
	案例2:
			每个客户的代理描述符号的通信				
	
二.TCP通信特点(相对于UDP)
	案例3:
		有连接:主要连接后，发送数据不用指定IP与端口
		数据无边界:TCP数据流，非数据报文.
		描述符号双工：
		数据准确:TCP协议保证数据时完全正确
	案例4:
		使用TCP发送数据注意:
				不要以为固定长的数据,一定接收正确,要求使用MSG_WAITALL
		
	案例5:
		TCP数据发送的分析:
				基本数据int short long float  double
				结构体数据struct
				建议使用MSG_WAITALL
				字符串数据以及文件数据等不固定长度的数据怎么发送?
				
		制定数据包:
					头:大小固定(数据大小)
					体:大小变化(数据)		
	案例6:
			使用TCP传送文件
			定义文件数据包.
					int 数据大小;
					char[]数据
							
			传递文件名
			传递数据(循环)
			传递0长度的数据表示文件结束							
			
三.TCP服务器编程模式
		TCP的服务器端维护多个客户的网络文件描述符号.
		对服务器多个客户描述符号同时做读操作,是不可能.需要多任务模型完成.
		多任务模型?
		1.多进程
		2.IO的异步模式(select模式/poll模式)
		3.多线程模式		
		4.多进程池
		5.线程池

四.综合应用--多进程应用
		1.怎样使用多进程
		2.多进程的缺陷,以及怎么解决
		 客户端
		 		2.1.建立socket
		 		2.2.连接服务器
		 		2.3.创建CURSES界面
		 		2.4.创建子进程
		 		2.5.在父进程中,输入,发送聊天信息
		 		2.6.在子进程中,接收服务器传递其他客户聊天信息
		
总结:
			建立socket
			绑定地址
			监听
			循环接收客户连接
			为客户创建子进程
			在子进程接收该客户的数据,并且广播

总结:
		1.TCP的四大特点
		2.TCP的数据接收:固定长与变长数据的接收
		3.TCP的服务器多进程处理
					问题:多进程由于进程资源结构独立.
							  新进程的文件描述符号的环境在老进程无法访问?

作业:
		思考:
				有什么编程技巧可以解决进程的文件描述符号的一致?
				
		作业:
				完成TCP的聊天程序.
						1.数据能运行
						2.处理僵死进程
						3.服务器退出,客户也能正常结束
						4.客户退出,服务器也能够正确结束客户连接.
													  	
		
		
		
					